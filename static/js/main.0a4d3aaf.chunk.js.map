{"version":3,"sources":["components/Ball.tsx","components/Paddle.tsx","components/Pong.tsx","components/LoginPage.tsx","comms/TopicPublisher.js","comms/TopicSubscriber.js","comms/CommHandler.js","tools/LeaderboardProcessor.js","components/Pipe.jsx","components/Leaderboard.jsx","App.tsx","serviceWorker.js","index.js"],"names":["Ball","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Ballstyle","position","top","curY","left","curX","display","react_default","a","createElement","style","height","width","cx","cy","r","fill","React","Component","Paddle","Paddlestyle","playHeight","background","distanceFromWall","className","ballx","bally","dy","dx","DIST_FROM_HORIZONTAL_WALL","Math","atan2","Pong","fieldInput","paddleRef","paddleDistFromWall","nextX","nextY","hitPaddle","PLAYHEIGHT","velocity","sqrt","newAngle","redirectBall","cos","sin","setState","_this2","border","components_Ball","components_Paddle","ref","_this3","focus","setInterval","repositionBall","document","addEventListener","e","handleInput","move","key","LoginPage","enteredUsername","color","updateUsername","bind","assertThisInitialized","toUpperCase","onClick","handleJoin","value","onChange","lib","c","changeColor","undefined","username","target","hex","TopicPublisher","topicName","factoryProps","solace","SolclientFactoryProperties","SolclientFactory","init","publisher","connected","console","log","connect","session","hosturl","lastIndexOf","pass","vpn","createSession","url","vpnName","userName","password","error","toString","on","SessionEventCode","UP_NOTICE","sessionEvent","CONNECT_FAILED_ERROR","infoStr","DISCONNECTED","dispose","connectToSolace","publish","messageText","message","createMessage","setDestination","createTopicDestination","setBinaryAttachment","setDeliveryMode","MessageDeliveryModeType","DIRECT","send","disconnect","require","TopicSubscriber","receiveHandler","subscriber","subscribed","subscribe","SUBSCRIPTION_ERROR","correlationKey","SUBSCRIPTION_OK","MESSAGE","JSON","parse","Ok","getBinaryAttachment","dump","unsubscribe","CommHandler","joinHandler","ballHandler","leaveHandler","leaderboardHandler","joinPublisher","ballPublisher","leavePublisher","joinSubscriber","ballSubscriber","leaveSubscriber","leaderboardSubscriber","publishJoin","sessionId","name","stringify","publishBall","targetSessionId","angle","publishLeave","reason","killedBy","publishTest","item","testPublisher","compareLifetimes","b","timeAlive","Array","prototype","sum","prop","total","i","_len","length","Pipe","react","y","backgroundColor","borderLeftColor","borderTopColor","borderBottomColor","borderRightColor","Leaderboard","x","leaderboard","map","player","components_Pipe","App","commHandler","joined","leaderboardCallBack","leaveGame","joinCallBack","ballCallBack","leaveCallBack","v4","sort","offset","processLeaderBoardList","generateBall","source","components_Pong","components_Leaderboard","PONG_WIDTH","components_LoginPage","join","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a4d3aaf.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst SHAPEWIDTH = 40;\n\ninterface CLASSProps {\n    curX : number;\n    curY : number;\n}\n\ninterface CLASSState {\n}\nclass Ball extends React.Component<CLASSProps, CLASSState> {\n  constructor(props : any) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    let Ballstyle : React.CSSProperties = {\n        position: \"relative\",\n        top: \"\"+this.props.curY+\"px\",\n        left: \"\"+this.props.curX+\"px\",\n        display: \"block\"\n    }\n    return (\n      <svg style={Ballstyle} height={\"\" + SHAPEWIDTH + \"px\"} width={\"\" + SHAPEWIDTH + \"px\"}>\n        <circle cx={\"\" + SHAPEWIDTH/2 + \"px\"} cy={\"\" + SHAPEWIDTH/2 + \"px\"} r={\"\" + SHAPEWIDTH/2 + \"px\"} fill=\"pink\" />\n      </svg>\n    );\n  }\n}\n\nexport default Ball;\n","import React, { Component } from 'react';\n\nconst DIST_FROM_HORIZONTAL_WALL = 20;\ninterface CLASSProps {\n    playHeight : number,\n    /* the distance from VERTICAL wall */\n    distanceFromWall : number,\n}\n\ninterface CLASSState {\n}\nclass Paddle extends React.Component<CLASSProps, CLASSState> {\n  constructor(props : any) {\n    super(props);\n    this.state = {\n    };\n}\n    render() {\n        let Paddlestyle : React.CSSProperties = {\n            height: \"\"+this.props.playHeight/4+\"px\",\n            width: \"10px\",\n            background: \"black\",\n            position: \"relative\",\n            top: \"\"+this.props.distanceFromWall+\"px\",\n            left: \"\"+DIST_FROM_HORIZONTAL_WALL+\"px\",\n        }\n        return(\n            <div className = \"paddle\" style = {Paddlestyle}>\n            </div>\n        )\n    }\n    /**\n     * \n     * @param ballx x position of ball\n     * @param bally y position of ball\n     * @returns new direction of ball in radians relative to positive x axis\n     */\n    redirectBall(ballx:number, bally:number){\n        const cy = this.props.distanceFromWall + this.props.playHeight/8; //center of paddle y\n        const cx = DIST_FROM_HORIZONTAL_WALL+10; //center of paddle x\n        const dy = bally - cy; //distance y that ball is from paddle center\n        const dx = bally - cx; // distance x that ball is from paddle center\n        return Math.atan2(dy,dx);\n    }\n}\n\nexport default Paddle;\n","import React, { Component, isValidElement } from 'react';\nimport Ball from './Ball'\nimport Paddle from './Paddle'\n\nconst PLAYHEIGHT = 400;\nconst PLAYWIDTH = 800;\nconst SHAPEWIDTH = 40;\n\ninterface PongProps {\n  height:number,\n  width:number,\n  leaderboard:Array<object>\n}\ninterface PongState {\n  paddleDistFromWall: number;\n  curX : number;\n  curY : number;\n  dx : number;\n  dy : number;\n}\nclass Pong extends Component<PongProps, PongState> {\n  fieldInput: HTMLInputElement | null = null;\n  paddleRef: Paddle | null = null;\n  constructor(props:PongProps){\n    super(props);\n    this.state = {\n      paddleDistFromWall: 20,\n      curX : 100,\n      curY : 50,\n      dx : 4,\n      dy : -4\n    };\n  }\n\n\n  repositionBall() {\n    let curX = this.state.curX;\n    let curY = this.state.curY;\n    let nextX = curX + this.state.dx;\n    let nextY = curY + this.state.dy;\n    let hitPaddle = false;\n    let dx = (hitPaddle || nextX + SHAPEWIDTH > PLAYWIDTH || nextX < 0 ? this.state.dx * -1 : this.state.dx);\n    let dy = (hitPaddle || nextY + SHAPEWIDTH > PLAYHEIGHT || nextY < 0 ? this.state.dy * -1 : this.state.dy);\n    if((nextY >= this.state.paddleDistFromWall && nextY <= this.state.paddleDistFromWall+PLAYHEIGHT/4) && (nextX <= 25)){\n      if(this.paddleRef !== null){\n        const velocity = Math.sqrt(dx*dx + dy*dy);\n        hitPaddle = true;\n        const newAngle = this.paddleRef.redirectBall(nextX,nextY);\n        dx = Math.cos(newAngle) * velocity;\n        dy = Math.sin(newAngle) * velocity;\n      }\n    }\n    this.setState({\n      curX : nextX,\n      curY : nextY,\n      dx : dx,\n      dy : dy\n  });\n}\n\n\n  render() {\n    return (\n        <div style={{height:\"\"+this.props.height+\"px\", width: \"\"+this.props.width+\"px\", border: \"solid\"}}>\n           <Ball curX={this.state.curX} curY={this.state.curY}/>\n           <Paddle playHeight={PLAYHEIGHT} distanceFromWall={this.state.paddleDistFromWall} ref={ref=>this.paddleRef=ref}/>\n    </div>\n    );\n  }\n  componentDidMount(){\n    if(this.fieldInput !== null){this.fieldInput.focus()}\n    setInterval(() => this.repositionBall() ,10);\n    document.addEventListener(\"keypress\", (e)=>this.handleInput(e), false);\n  }\n\n\n  handleInput(e:any){\n    let move = 0;\n    if (e.key == \"j\" && this.state.paddleDistFromWall < PLAYHEIGHT*3/4){\n      move = 20; // move down screen\n    } else if (e.key == \"k\" && this.state.paddleDistFromWall >= 5) {\n      move = -20; // move up screen\n    }\n    this.setState({\n      paddleDistFromWall: this.state.paddleDistFromWall + move\n    })\n  }\n}\n\nexport default Pong;\n","import React, { Component, ButtonHTMLAttributes } from 'react';\nimport { TwitterPicker, ColorResult} from 'react-color';\n\n\ninterface LoginPageProps {\n    // properties this component recieves from parent here\n    handleJoin?: (name:string, color:string) => void;\n    // handleJoin?: () => void;\n}\n\ninterface LoginPageState {\n    // any variables that can affect the UI (when updated should re-render)\n    enteredUsername: string;\n    color: string;\n}\n\nclass LoginPage extends React.Component<LoginPageProps, LoginPageState> {\n    constructor(props: LoginPageProps) {\n        super(props);\n        this.state = {\n            enteredUsername: \"\",\n            color: \"#00FF00\"\n        };\n        this.updateUsername = this.updateUsername.bind(this);\n    }\n    public render(){\n        return (\n            <div className = \"LoginPage\">\n                <h1>\n                    WELCOME TO PIPE PONG\n                    {\" \" + this.state.enteredUsername.toUpperCase() + \"!!!\"}\n                </h1>\n                <button onClick={() => this.handleJoin()} style={{background:this.state.color}}>\n                Join Game\n                </button>\n                <input value = {this.state.enteredUsername} onChange = {this.updateUsername}/>\n                {/* </input> */}\n                <br/>\n                <h4>\n                Choose your color!\n                </h4>\n                <TwitterPicker color= {this.state.color} onChange={(c)=>this.changeColor(c)} />\n                <br/>\n                <h3>\n                    Rules\n                </h3>\n                <p>\n                    Welcome! This is just like a regular game of Pong, just hit the ball back towards the right with your paddle\n                    and stay in the game as long as possible.\n                    \n                    <br/>\n                    <br/>\n                    Move your paddle up with 'k' and down with 'j'.\n                    <br/>\n                    D'ONT CLICK THE SCREEN OR ELSE YOU MIGHT BRAKE THE PADDLE AND HAVE TO RESTART\n                    <br/>\n                </p>\n            </div>\n        )\n    }\n    handleJoin(){\n        if(this.props.handleJoin !== undefined){\n            this.props.handleJoin(this.state.enteredUsername, this.state.color);\n        }\n    }\n   \n    updateUsername(username: React.ChangeEvent<HTMLInputElement>){\n       this.setState({\n            enteredUsername: username.target.value\n       });\n    }\n    changeColor(color:ColorResult){\n        this.setState({\n            color: color.hex\n        })\n    }\n}\n\nexport default LoginPage;\n","import solace from 'solclientjs';\n\nconst HOSTURL = \"ws://mr4b11zr98z.messaging.mymaas.net:80\";\nvar USERNAME = \"solace-cloud-client\";\nconst VPN = \"msgvpn-4b11zr985\";\nconst PASS = \"13hvb0guu1h4c5934o0cjn1rkl\";\n\nvar TopicPublisher = function (topicName) {\n    var factoryProps = new solace.SolclientFactoryProperties();\n    // factoryProps.profile = solace.SolclientFactoryProfiles.version10;\n    solace.SolclientFactory.init(factoryProps);\n\n    var publisher = {};\n    publisher.session = null;\n    publisher.topicName = topicName;\n    publisher.connected = false;\n\n    console.log('\\n*** Publisher to topic \"' + publisher.topicName + '\" is ready to connect ***');\n\n    // Establishes connection to Solace message router\n    publisher.connect = function () {\n        // extract params\n        if (publisher.session !== null) {\n            console.log('Already connected and ready to publish messages.');\n            return;\n        }\n        var hosturl = HOSTURL;\n        // check for valid protocols\n        if (hosturl.lastIndexOf('ws://', 0) !== 0 && hosturl.lastIndexOf('wss://', 0) !== 0 &&\n            hosturl.lastIndexOf('http://', 0) !== 0 && hosturl.lastIndexOf('https://', 0) !== 0) {\n            console.log('Invalid protocol - please use one of ws://, wss://, http://, https://');\n            return;\n        }\n        var username = USERNAME;\n        var pass = PASS;\n        var vpn = VPN;\n        if (!hosturl || !username || !pass || !vpn) {\n            console.log('Cannot connect: please specify all the Solace message router properties.');\n            return;\n        }\n        console.log('Connecting to Solace message router using url: ' + hosturl);\n        console.log('Client username: ' + username);\n        console.log('Solace message router VPN name: ' + vpn);\n        // create session\n        try {\n            publisher.session = solace.SolclientFactory.createSession({\n                // solace.SessionProperties\n                url:      hosturl,\n                vpnName:  vpn,\n                userName: username,\n                password: pass,\n            });\n        } catch (error) {\n            console.log(error.toString());\n        }\n        // define session event listeners\n        publisher.session.on(solace.SessionEventCode.UP_NOTICE, function (sessionEvent) {\n            publisher.connected = true;\n            console.log('=== Successfully connected and ready to publish messages. ===');\n        });\n        publisher.session.on(solace.SessionEventCode.CONNECT_FAILED_ERROR, function (sessionEvent) {\n            publisher.connected = false;\n            console.log('Connection failed to the message router: ' + sessionEvent.infoStr +\n                ' - check correct parameter values and connectivity!');\n        });\n        publisher.session.on(solace.SessionEventCode.DISCONNECTED, function (sessionEvent) {\n            publisher.connected = false;\n            console.log('Disconnected.');\n            if (publisher.session !== null) {\n                publisher.session.dispose();\n                publisher.session = null;\n            }\n        });\n\n        publisher.connectToSolace();   \n\n    };\n\n    // Actually connects the session triggered when the iframe has been loaded - see in html code\n    publisher.connectToSolace = function () {\n        try {\n            publisher.session.connect();\n        } catch (error) {\n            console.log(error.toString());\n        }\n    };\n\n    // Publishes one message\n    publisher.publish = function (messageText) {\n        if (publisher.session !== null) {\n            var message = solace.SolclientFactory.createMessage();\n            message.setDestination(solace.SolclientFactory.createTopicDestination(publisher.topicName));\n            message.setBinaryAttachment(messageText);\n            message.setDeliveryMode(solace.MessageDeliveryModeType.DIRECT);\n            console.log('Publishing message \"' + messageText + '\" to topic \"' + publisher.topicName + '\"...');\n            try {\n                publisher.session.send(message);\n                console.log('Message published.');\n            } catch (error) {\n                console.log(error.toString());\n            }\n        } else {\n            console.log('Cannot publish because not connected to Solace message router.');\n        }\n    };\n\n    // Gracefully disconnects from Solace message router\n    publisher.disconnect = function () {\n        publisher.connected = false;\n        console.log('Disconnecting from Solace message router...');\n        if (publisher.session !== null) {\n            try {\n                publisher.session.disconnect();\n            } catch (error) {\n                console.log(error.toString());\n            }\n        } else {\n            console.log('Not connected to Solace message router.');\n        }\n    };\n\n    return publisher;\n};\n\nexport default TopicPublisher;","\n// import solace from 'solclientjs';\n\nvar solace = require('solclientjs');\n\nvar HOSTURL = \"ws://mr4b11zr98z.messaging.mymaas.net:80\";\nvar USERNAME = \"solace-cloud-client\";\nvar VPN = \"msgvpn-4b11zr985\";\nvar PASS = \"13hvb0guu1h4c5934o0cjn1rkl\";\n\nvar TopicSubscriber = function (topicName, receiveHandler) {\n    var factoryProps = new solace.SolclientFactoryProperties();\n    // factoryProps.profile = solace.SolclientFactoryProfiles.version10;\n    solace.SolclientFactory.init(factoryProps);\n    var subscriber = {};\n    subscriber.session = null;\n    subscriber.topicName = topicName;\n    subscriber.subscribed = false;\n    subscriber.connected = false;\n\n    // Logger\n    // subscriber.log = function (line) {\n    //     var now = new Date();\n    //     var time = [('0' + now.getHours()).slice(-2), ('0' + now.getMinutes()).slice(-2),\n    //         ('0' + now.getSeconds()).slice(-2)];\n    //     var timestamp = '[' + time.join(':') + '] ';\n    //     console.log(timestamp + line);\n    //     var logTextArea = document.getElementById('log');\n    //     logTextArea.value += timestamp + line + '\\n';\n    //     logTextArea.scrollTop = logTextArea.scrollHeight;\n    // };\n\n    console.log('\\n*** Subscriber to topic \"' + subscriber.topicName + '\" is ready to connect ***');\n\n    // Establishes connection to Solace router\n    subscriber.connect = function () {\n        // extract params\n        if (subscriber.session !== null) {\n            console.log('Already connected and ready to subscribe.');\n            return;\n        }\n        var hosturl = HOSTURL;\n        // check for valid protocols\n        if (hosturl.lastIndexOf('ws://', 0) !== 0 && hosturl.lastIndexOf('wss://', 0) !== 0 &&\n            hosturl.lastIndexOf('http://', 0) !== 0 && hosturl.lastIndexOf('https://', 0) !== 0) {\n            console.log('Invalid protocol - please use one of ws://, wss://, http://, https://');\n            return;\n        }\n        var username = USERNAME;\n        var pass = PASS;\n        var vpn = VPN;\n        if (!hosturl || !username || !pass || !vpn) {\n            console.log('Cannot connect: please specify all the Solace message router properties.');\n            return;\n        }\n        console.log('Connecting to Solace message router using url: ' + hosturl);\n        console.log('Client username: ' + username);\n        console.log('Solace message router VPN name: ' + vpn);\n        // create session\n        try {\n            subscriber.session = solace.SolclientFactory.createSession({\n                // solace.SessionProperties\n                url:      hosturl,\n                vpnName:  vpn,\n                userName: username,\n                password: pass,\n            });\n        } catch (error) {\n            console.log(error.toString());\n        }\n        // define session event listeners\n        subscriber.session.on(solace.SessionEventCode.UP_NOTICE, function (sessionEvent) {\n            console.log('=== Successfully connected and ready to subscribe. ===');\n            subscriber.subscribe();\n            subscriber.connected = true;\n        });\n        subscriber.session.on(solace.SessionEventCode.CONNECT_FAILED_ERROR, function (sessionEvent) {\n            subscriber.connected = false;\n            console.log('Connection failed to the message router: ' + sessionEvent.infoStr +\n                ' - check correct parameter values and connectivity!');\n        });\n        subscriber.session.on(solace.SessionEventCode.DISCONNECTED, function (sessionEvent) {\n            subscriber.connected = false;\n            console.log('Disconnected.');\n            subscriber.subscribed = false;\n            if (subscriber.session !== null) {\n                subscriber.session.dispose();\n                subscriber.session = null;\n            }\n        });\n        subscriber.session.on(solace.SessionEventCode.SUBSCRIPTION_ERROR, function (sessionEvent) {\n            console.log('Cannot subscribe to topic: ' + sessionEvent.correlationKey);\n        });\n        subscriber.session.on(solace.SessionEventCode.SUBSCRIPTION_OK, function (sessionEvent) {\n            if (subscriber.subscribed) {\n                subscriber.subscribed = false;\n                console.log('Successfully unsubscribed from topic: ' + sessionEvent.correlationKey);\n            } else {\n                subscriber.subscribed = true;\n                console.log('Successfully subscribed to topic: ' + sessionEvent.correlationKey);\n                console.log('=== Ready to receive messages. ===');\n            }\n        });\n        // define message event listener\n        subscriber.session.on(solace.SessionEventCode.MESSAGE, function (message) {\n            receiveHandler(JSON.parse(message.Ok));\n            console.log('Received message: \"' + message.getBinaryAttachment() + '\", details:\\n' +\n                message.dump());\n        });\n\n\n       subscriber.connectToSolace();\n    };\n\n    // Actually connects the session triggered when the iframe has been loaded - see in html code\n    subscriber.connectToSolace = function () {\n        try {\n            subscriber.session.connect();\n        } catch (error) {\n            console.log(error.toString());\n        }\n    };\n\n    // Subscribes to topic on Solace message router\n    subscriber.subscribe = function () {\n        if (subscriber.session !== null) {\n            if (subscriber.subscribed) {\n                console.log('Already subscribed to \"' + subscriber.topicName\n                    + '\" and ready to receive messages.');\n            } else {\n                console.log('Subscribing to topic: ' + subscriber.topicName);\n                try {\n                    subscriber.session.subscribe(\n                        solace.SolclientFactory.createTopicDestination(subscriber.topicName),\n                        true, // generate confirmation when subscription is added successfully\n                        subscriber.topicName, // use topic name as correlation key\n                        10000 // 10 seconds timeout for this operation\n                    );\n                } catch (error) {\n                    console.log(error.toString());\n                }\n            }\n        } else {\n            console.log('Cannot subscribe because not connected to Solace message router.');\n        }\n    };\n\n    // Unsubscribes from topic on Solace message router\n    subscriber.unsubscribe = function () {\n        if (subscriber.session !== null) {\n            if (subscriber.subscribed) {\n                console.log('Unsubscribing from topic: ' + subscriber.topicName);\n                try {\n                    subscriber.session.unsubscribe(\n                        solace.SolclientFactory.createTopicDestination(subscriber.topicName),\n                        true, // generate confirmation when subscription is removed successfully\n                        subscriber.topicName, // use topic name as correlation key\n                        10000 // 10 seconds timeout for this operation\n                    );\n                } catch (error) {\n                    console.log(error.toString());\n                }\n            } else {\n                console.log('Cannot unsubscribe because not subscribed to the topic \"'\n                    + subscriber.topicName + '\"');\n            }\n        } else {\n            console.log('Cannot unsubscribe because not connected to Solace message router.');\n        }\n    };\n\n    // Gracefully disconnects from Solace message router\n    subscriber.disconnect = function () {\n        subscriber.connected = false;\n        console.log('Disconnecting from Solace message router...');\n        if (subscriber.session !== null) {\n            try {\n                subscriber.session.disconnect();\n            } catch (error) {\n                console.log(error.toString());\n            }\n        } else {\n            console.log('Not connected to Solace message router.');\n        }\n    };\n\n    return subscriber;\n};\nexport default TopicSubscriber;","import TopicPublisher from './TopicPublisher'\nimport TopicSubscriber from './TopicSubscriber'\n\nclass CommHandler {\n    constructor(joinHandler, ballHandler, leaveHandler, leaderboardHandler){\n        // define all the subscribers\n        // var testHandler = function(){\n        //     console.log(\"Test message was sent\")\n        // }\n        // define all the publishers\n\n        // this.testPublisher = TopicPublisher('test');\n        this.joinPublisher = TopicPublisher('join');\n        this.ballPublisher = TopicPublisher('ball');\n        this.leavePublisher = TopicPublisher('leave');\n        // this.testSubscriber = TopicSubscriber('test', testHandler);\n        this.joinSubscriber = TopicSubscriber('join', joinHandler);\n        this.ballSubscriber = TopicSubscriber('ball', ballHandler);\n        this.leaveSubscriber = TopicSubscriber('leave', leaveHandler);\n        this.leaderboardSubscriber = TopicSubscriber('leaderboard', leaderboardHandler);\n    }\n\n    connect = function(){\n        // connect all the publishers to the communication channel\n        // this.testPublisher.connect();\n        this.joinPublisher.connect();\n        this.ballPublisher.connect();\n        this.leavePublisher.connect();\n\n        // connect all the subscribers to the communication channel\n        // this.testSubscriber.connect();\n        this.joinSubscriber.connect();\n        this.ballSubscriber.connect();\n        this.leaveSubscriber.connect();\n        this.leaderboardSubscriber.connect();\n    }\n\n    publishJoin = function(sessionId, name, color){\n        var message = {\n            sessionId: sessionId,\n            name: name,\n            color: color\n        }\n        this.joinPublisher.publish(JSON.stringify(message));\n    }\n    publishBall = function(sessionId, targetSessionId, angle, velocity){\n        var message = {\n            sessionId: sessionId,\n            targetSessionId: targetSessionId,\n            angle: angle,\n            velocity: velocity\n        }\n        this.ballPublisher.publish(JSON.stringify(message));\n    }\n    publishLeave = function(sessionId, reason, killedBy){\n        var message = {\n            sessionId: sessionId,\n            reason: reason,\n            killedBy: killedBy\n        }\n        this.leavePublisher.publish(JSON.stringify(message));\n    }\n    publishTest = function(item){\n        var message = {\n            item: item\n        }\n        this.testPublisher.publish(JSON.stringify(message));\n    }\n}\n\nexport default CommHandler;","function processLeaderBoardList(leaderboard, height){\n    leaderboard.sort(compareLifetimes);\n    var total = leaderboard.sum(\"timeAlive\");\n    var offset = 0;\n    leaderboard.map((player)=>{\n        player.height = height*player.timeAlive/total;\n        player.y = offset;\n        offset += player.height;\n    })\n}\n\nfunction compareLifetimes(b, a){\n    if (a.timeAlive < b.timeAlive) return -1;\n    if (a.timeAlive > b.timeAlive) return 1;\n    return 0;\n}\n\nArray.prototype.sum = function(prop){\n    var total = 0;\n    for (var i = 0, _len = this.length; i<_len; i++){\n        total += this[i][prop]\n    }\n    return total\n}\n\nexport {processLeaderBoardList}","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types'\n\nconst PIPE_WIDTH = 100;\n\n\nclass Pipe extends Component {\n    constructor(props){\n        super(props);\n    }\n    render() {\n        return (\n            <Fragment>\n                <tr width={this.props.width} \n                        height={this.props.height} \n                        y={this.props.y}\n                        >\n                    <td\n                        style={{\n                        backgroundColor: this.props.color,\n                        borderLeftColor: this.props.color,\n                        border: \"15px solid\",\n                        borderTopColor: \"white\",\n                        borderBottomColor: \"white\",\n                        borderRightColor: \"white\",\n                        }}>\n                        {this.props.name}\n                    </td>\n                </tr>\n            </Fragment>\n        );\n    }\n}\nPipe.propTypes = {\n    height: PropTypes.number,\n    width: PropTypes.number,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    name: PropTypes.string,\n    color: PropTypes.string,\n    sessionId: PropTypes.int,\n};\n\nexport default Pipe;","import React, { Component, Fragment } from 'react';\nimport Pipe from './Pipe';\nimport PropTypes from 'prop-types'\n\n\nclass Leaderboard extends Component {\n    constructor(props){\n        super(props);\n    }\n    render() {\n        return (\n            <table height={this.props.height} width={this.props.width} x={this.props.x} y={this.props.y}>\n                {this.props.leaderboard.map((player)=>{\n                    return <Pipe height={player.height} \n                        sessionId={player.sessionId} \n                        name={player.name} \n                        color={player.color} \n                        width={this.props.width} \n                        y={player.y}/>\n                })}\n            </table>\n        );\n    }\n}\n\nLeaderboard.propTypes ={\n    height: PropTypes.number,\n    leaderboard: PropTypes.array\n}\n\nexport default Leaderboard;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Pong from './components/Pong';\nimport Login from './components/LoginPage';\nimport CommHandler from './comms/CommHandler';\nimport {v4} from 'uuid'\nimport {processLeaderBoardList} from './tools/LeaderboardProcessor'\nimport Leaderboard from './components/Leaderboard';\n\nconst PONG_HEIGHT:number = 400;\nconst PONG_WIDTH:number= 800;\n\ninterface CLASSProps {\n}\n\ninterface CLASSState {\n    joined: Boolean;\n    name: string;\n    color: string;\n    sessionId: string;\n    leaderboard: Array<object>;\n}\n\ninterface JoinMessage {\n  sessionId:string;\n  name:string;\n  color:string;\n}\ninterface LeaderBoardMessage {\n  leaderboard:Array<object>;\n}\ninterface LeaveMessage {\n  sessionId:string;\n  reason:string;\n  killedBy:string;\n}\ninterface BallMessage {\n  sessionId:string;\n  targetSessionId:string;\n  velocity:number;\n  angle:number;\n}\n\nclass App extends React.Component<CLASSProps, CLASSState> {\n    commHandler:CommHandler;\n    constructor(props: CLASSProps) {\n        super(props);\n        this.state = {\n            joined: false,\n            name: \"\",\n            color: \"#00FF00\",\n            sessionId: \"\",\n            leaderboard: [],\n        }\n        this.leaderboardCallBack = this.leaderboardCallBack.bind(this);\n        this.leaveGame = this.leaveGame.bind(this);\n        this.commHandler = new CommHandler(this.joinCallBack, this.ballCallBack, this.leaveCallBack, this.leaderboardCallBack);\n        this.commHandler.connect();\n    };\n\n  join(name:string, color:string) {\n    var sessionId:string = v4();\n    this.setState({\n        joined: true,\n        name: name,\n        color: color,\n        sessionId: sessionId,\n    });\n    this.commHandler.publishJoin(sessionId,\n                                 name,\n                                 color)\n  }\n  leaderboardCallBack(message:LeaderBoardMessage){\n    var leaderboard = message.leaderboard;\n    processLeaderBoardList(leaderboard, PONG_HEIGHT);\n    this.setState({\n      leaderboard: leaderboard\n    })\n  }\n  joinCallBack(message:JoinMessage){\n    console.log(\"Join Callback\", message);\n  }\n  leaveCallBack(message:LeaveMessage){\n    console.log(\"Leave Callback\", message);\n  }\n  ballCallBack(message:BallMessage){\n    if (this.state.sessionId == message.targetSessionId){\n      this.generateBall(message.velocity, message.angle, message.sessionId);\n    }\n  }\n\n  generateBall(velocity:number, angle:number, source:string){\n    console.log(\"A ball was made with\\nvelocity: \" + velocity + \"\\nangle: \" + angle)\n  }\n\n  leaveGame(sessionId:string, reason:string, killedBy:string){\n    console.log(\"Sending a leave message\")\n    this.setState({\n      joined: false\n    })\n    this.commHandler.publishLeave(sessionId, reason, killedBy);\n  }\n\n  render() {\n      if(this.state.joined)\n        return(\n          <Fragment>\n            <table>\n              <tr>\n                <td>\n                  <Pong height={PONG_HEIGHT} width={PONG_WIDTH} leaderboard={this.state.leaderboard}/>\n                </td>\n                <td>\n                  <Leaderboard leaderboard={this.state.leaderboard} height={PONG_HEIGHT} width={PONG_WIDTH/10} x={9*PONG_WIDTH/10} y=\"0\"/>\n                </td>\n              </tr>\n            </table>\n            <button onClick={() => this.leaveGame(this.state.sessionId, \"Left\", \"Noone\")}>Leave</button>\n          </Fragment>\n        );\n      else\n        return(<Login handleJoin={(name,color) => this.join(name,color)}/>);\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}